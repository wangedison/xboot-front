pipeline{

      // 定义groovy脚本中使用的环境变量
      environment{
        // 选择构建环境
        ENV =  sh(returnStdout: true,script: 'echo $env').trim()
        IMAGE = "registry-vpc.cn-shenzhen.aliyuncs.com/nfplus-dev/xboot-front:1.0-SNAPSHOT"
      }

      // 定义本次构建使用哪个标签的构建环境
      agent{
        node{
          label 'slave-pipeline2'
        }
      }

      // "stages"定义项目构建的多个模块，可以添加多个 “stage”， 可以多个 “stage” 串行或者并行执行
      stages{

        // 添加第一个stage， 运行源码打包命令
        stage('Package'){
          steps{
              container("node") {
                  sh "npm install --registry=https://registry.npm.taobao.org"
                  sh "npm run build"
              }
          }
        }

        // 添加第二个stage, 运行容器镜像构建和推送命令， 用到了environment中定义的groovy环境变量
        stage('Image Build And Publish'){
          steps{
              container('docker') {
                   sh 'docker version'
                   // 刀客编译
                   sh 'docker build -t $IMAGE  -f ./devops/Dockerfile .'
                   // 刀客镜像推送
                   sh 'docker push $IMAGE'
                   // 清理镜像
                   sh 'docker image prune -f'
              }
          }
        }

        // 添加第三个stage， 将容器部署到k8s集群
        stage('Deploy to Kubernetes') {
            steps {
                container('kubectl') {
                    sh "sed -i 's|BUILD_TAG|$BUILD_TAG|g' devops/deployment.yaml"
                    step([$class: 'KubernetesDeploy', authMethod: 'certs', apiServerUrl: 'https://kubernetes.default.svc.cluster.local:443', credentialsId:'k8sCertAuth', config: 'devops/deployment.yaml', variableState: ''])
                }
            }
        }
      }
    }
